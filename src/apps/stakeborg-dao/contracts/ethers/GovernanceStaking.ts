/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace LibStakingStorage {
  export type StakeStruct = {
    timestamp: BigNumberish;
    amount: BigNumberish;
    expiryTimestamp: BigNumberish;
    delegatedTo: string;
  };

  export type StakeStructOutput = [BigNumber, BigNumber, BigNumber, string] & {
    timestamp: BigNumber;
    amount: BigNumber;
    expiryTimestamp: BigNumber;
    delegatedTo: string;
  };
}

export interface GovernanceStakingInterface extends utils.Interface {
  functions: {
    'MAX_LOCK()': FunctionFragment;
    'balanceAtTs(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'delegate(address)': FunctionFragment;
    'delegatedPower(address)': FunctionFragment;
    'delegatedPowerAtTs(address,uint256)': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'depositAndLock(uint256,uint256)': FunctionFragment;
    'initDaoStaking(address,address)': FunctionFragment;
    'lock(uint256)': FunctionFragment;
    'multiplierAtTs(address,uint256)': FunctionFragment;
    'multiplierOf(address)': FunctionFragment;
    'stakeAtTs(address,uint256)': FunctionFragment;
    'stakeborgTokenStaked()': FunctionFragment;
    'stakeborgTokenStakedAtTs(uint256)': FunctionFragment;
    'stopDelegate()': FunctionFragment;
    'userDelegatedTo(address)': FunctionFragment;
    'userLockedUntil(address)': FunctionFragment;
    'votingPower(address)': FunctionFragment;
    'votingPowerAtTs(address,uint256)': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'MAX_LOCK'
      | 'balanceAtTs'
      | 'balanceOf'
      | 'delegate'
      | 'delegatedPower'
      | 'delegatedPowerAtTs'
      | 'deposit'
      | 'depositAndLock'
      | 'initDaoStaking'
      | 'lock'
      | 'multiplierAtTs'
      | 'multiplierOf'
      | 'stakeAtTs'
      | 'stakeborgTokenStaked'
      | 'stakeborgTokenStakedAtTs'
      | 'stopDelegate'
      | 'userDelegatedTo'
      | 'userLockedUntil'
      | 'votingPower'
      | 'votingPowerAtTs'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'MAX_LOCK', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceAtTs', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'delegate', values: [string]): string;
  encodeFunctionData(functionFragment: 'delegatedPower', values: [string]): string;
  encodeFunctionData(functionFragment: 'delegatedPowerAtTs', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'depositAndLock', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'initDaoStaking', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'lock', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'multiplierAtTs', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'multiplierOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'stakeAtTs', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'stakeborgTokenStaked', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stakeborgTokenStakedAtTs', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'stopDelegate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'userDelegatedTo', values: [string]): string;
  encodeFunctionData(functionFragment: 'userLockedUntil', values: [string]): string;
  encodeFunctionData(functionFragment: 'votingPower', values: [string]): string;
  encodeFunctionData(functionFragment: 'votingPowerAtTs', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'MAX_LOCK', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceAtTs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegatedPower', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegatedPowerAtTs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositAndLock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initDaoStaking', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'multiplierAtTs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'multiplierOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakeAtTs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakeborgTokenStaked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakeborgTokenStakedAtTs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stopDelegate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userDelegatedTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userLockedUntil', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'votingPower', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'votingPowerAtTs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Delegate(address,address)': EventFragment;
    'DelegatedPowerDecreased(address,address,uint256,uint256)': EventFragment;
    'DelegatedPowerIncreased(address,address,uint256,uint256)': EventFragment;
    'Deposit(address,uint256,uint256)': EventFragment;
    'Lock(address,uint256)': EventFragment;
    'Withdraw(address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Delegate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DelegatedPowerDecreased'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DelegatedPowerIncreased'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Lock'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface DelegateEventObject {
  from: string;
  to: string;
}
export type DelegateEvent = TypedEvent<[string, string], DelegateEventObject>;

export type DelegateEventFilter = TypedEventFilter<DelegateEvent>;

export interface DelegatedPowerDecreasedEventObject {
  from: string;
  to: string;
  amount: BigNumber;
  to_newDelegatedPower: BigNumber;
}
export type DelegatedPowerDecreasedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DelegatedPowerDecreasedEventObject
>;

export type DelegatedPowerDecreasedEventFilter = TypedEventFilter<DelegatedPowerDecreasedEvent>;

export interface DelegatedPowerIncreasedEventObject {
  from: string;
  to: string;
  amount: BigNumber;
  to_newDelegatedPower: BigNumber;
}
export type DelegatedPowerIncreasedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DelegatedPowerIncreasedEventObject
>;

export type DelegatedPowerIncreasedEventFilter = TypedEventFilter<DelegatedPowerIncreasedEvent>;

export interface DepositEventObject {
  user: string;
  amount: BigNumber;
  newBalance: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface LockEventObject {
  user: string;
  timestamp: BigNumber;
}
export type LockEvent = TypedEvent<[string, BigNumber], LockEventObject>;

export type LockEventFilter = TypedEventFilter<LockEvent>;

export interface WithdrawEventObject {
  user: string;
  amountWithdrew: BigNumber;
  amountLeft: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface GovernanceStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GovernanceStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_LOCK(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceAtTs(user: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    delegate(to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    delegatedPower(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    delegatedPowerAtTs(user: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    depositAndLock(
      amount: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    initDaoStaking(
      _stakeborgToken: string,
      _rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    lock(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    multiplierAtTs(user: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    multiplierOf(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    stakeAtTs(
      user: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[LibStakingStorage.StakeStructOutput]>;

    stakeborgTokenStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakeborgTokenStakedAtTs(timestamp: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    stopDelegate(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    userDelegatedTo(user: string, overrides?: CallOverrides): Promise<[string]>;

    userLockedUntil(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    votingPower(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    votingPowerAtTs(user: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  MAX_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

  balanceAtTs(user: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  delegate(to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  delegatedPower(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  delegatedPowerAtTs(user: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  depositAndLock(
    amount: BigNumberish,
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  initDaoStaking(
    _stakeborgToken: string,
    _rewards: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  lock(
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  multiplierAtTs(user: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  multiplierOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  stakeAtTs(
    user: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<LibStakingStorage.StakeStructOutput>;

  stakeborgTokenStaked(overrides?: CallOverrides): Promise<BigNumber>;

  stakeborgTokenStakedAtTs(timestamp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  stopDelegate(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  userDelegatedTo(user: string, overrides?: CallOverrides): Promise<string>;

  userLockedUntil(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  votingPower(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  votingPowerAtTs(user: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    balanceAtTs(user: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    delegate(to: string, overrides?: CallOverrides): Promise<void>;

    delegatedPower(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    delegatedPowerAtTs(user: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    depositAndLock(amount: BigNumberish, timestamp: BigNumberish, overrides?: CallOverrides): Promise<void>;

    initDaoStaking(_stakeborgToken: string, _rewards: string, overrides?: CallOverrides): Promise<void>;

    lock(timestamp: BigNumberish, overrides?: CallOverrides): Promise<void>;

    multiplierAtTs(user: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    multiplierOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    stakeAtTs(
      user: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<LibStakingStorage.StakeStructOutput>;

    stakeborgTokenStaked(overrides?: CallOverrides): Promise<BigNumber>;

    stakeborgTokenStakedAtTs(timestamp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    stopDelegate(overrides?: CallOverrides): Promise<void>;

    userDelegatedTo(user: string, overrides?: CallOverrides): Promise<string>;

    userLockedUntil(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    votingPower(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    votingPowerAtTs(user: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Delegate(address,address)'(from?: string | null, to?: string | null): DelegateEventFilter;
    Delegate(from?: string | null, to?: string | null): DelegateEventFilter;

    'DelegatedPowerDecreased(address,address,uint256,uint256)'(
      from?: string | null,
      to?: string | null,
      amount?: null,
      to_newDelegatedPower?: null,
    ): DelegatedPowerDecreasedEventFilter;
    DelegatedPowerDecreased(
      from?: string | null,
      to?: string | null,
      amount?: null,
      to_newDelegatedPower?: null,
    ): DelegatedPowerDecreasedEventFilter;

    'DelegatedPowerIncreased(address,address,uint256,uint256)'(
      from?: string | null,
      to?: string | null,
      amount?: null,
      to_newDelegatedPower?: null,
    ): DelegatedPowerIncreasedEventFilter;
    DelegatedPowerIncreased(
      from?: string | null,
      to?: string | null,
      amount?: null,
      to_newDelegatedPower?: null,
    ): DelegatedPowerIncreasedEventFilter;

    'Deposit(address,uint256,uint256)'(user?: string | null, amount?: null, newBalance?: null): DepositEventFilter;
    Deposit(user?: string | null, amount?: null, newBalance?: null): DepositEventFilter;

    'Lock(address,uint256)'(user?: string | null, timestamp?: null): LockEventFilter;
    Lock(user?: string | null, timestamp?: null): LockEventFilter;

    'Withdraw(address,uint256,uint256)'(
      user?: string | null,
      amountWithdrew?: null,
      amountLeft?: null,
    ): WithdrawEventFilter;
    Withdraw(user?: string | null, amountWithdrew?: null, amountLeft?: null): WithdrawEventFilter;
  };

  estimateGas: {
    MAX_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    balanceAtTs(user: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    delegate(to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    delegatedPower(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    delegatedPowerAtTs(user: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    depositAndLock(
      amount: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    initDaoStaking(
      _stakeborgToken: string,
      _rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    lock(timestamp: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    multiplierAtTs(user: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    multiplierOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    stakeAtTs(user: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    stakeborgTokenStaked(overrides?: CallOverrides): Promise<BigNumber>;

    stakeborgTokenStakedAtTs(timestamp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    stopDelegate(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    userDelegatedTo(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    userLockedUntil(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    votingPower(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    votingPowerAtTs(user: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_LOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceAtTs(user: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegate(to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    delegatedPower(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegatedPowerAtTs(user: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    depositAndLock(
      amount: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    initDaoStaking(
      _stakeborgToken: string,
      _rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    lock(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    multiplierAtTs(user: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiplierOf(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeAtTs(user: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeborgTokenStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeborgTokenStakedAtTs(timestamp: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stopDelegate(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    userDelegatedTo(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userLockedUntil(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingPower(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingPowerAtTs(user: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
